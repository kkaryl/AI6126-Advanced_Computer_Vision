# Modified SRResNet w/o BN from:
# Photo-Realistic Single Image Super-Resolution Using a Generative Adversarial Network

# general settings
name: 301_CARN_x4_f64_DIV2K_1000k_B16G1
model_type: SRModel
scale: 4
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 0

# dataset and data loader settings
datasets:
  train:
    name: DIV2K
    type: PairedImageDataset
    dataroot_gt: ../../data/DIV2K/Train/HR_sub.lmdb
    dataroot_lq: ../../data/DIV2K/Train/LR_x4_sub.lmdb
    #dataroot_gt: ../../../data/DIV2K/Train/HR
    #dataroot_lq: ../../../data/DIV2K/Train/LR_x4
    # (for lmdb)
    # dataroot_gt: datasets/DIV2K/DIV2K_train_HR_sub.lmdb
    # dataroot_lq: datasets/DIV2K/DIV2K_train_LR_bicubic_X4_sub.lmdb
    filename_tmpl: '{}'
    io_backend:
      type: lmdb
      # (for lmdb)
      # type: lmdb

    gt_size: 128 #paired_random_crop
    use_flip: true #horizontal & vertical flips
    use_rot: true #rotate (0, 90, 180, 270 degrees)

    # data loader
    use_shuffle: true
    num_worker_per_gpu: 6
    batch_size_per_gpu: 16
    dataset_enlarge_ratio: 100
    prefetch_mode: ~

  val:
    name: DIV2KTest
    type: PairedImageDataset
    dataroot_gt: ../../data/DIV2K/Val/HR
    dataroot_lq: ../../data/DIV2K/Val/LR_x4
    io_backend:
      type: disk

# network structures
network_g:
  type: CARN
  num_in_ch: 3
  num_out_ch: 3
  num_feat: 64
  upscale: 4
  res_scale: 1
  img_range: 255.
  rgb_mean: [ 0.4488, 0.4371, 0.4040 ]

# path
path:
  pretrain_network_g: ~
  strict_load_g: true
  resume_state: ~

# training settings
train:
  use_cutblur:
    prob: 0
    alpha: 1
  use_rgb_perm:
    prob: 0

  optim_g:
    type: Adam
    lr: !!float 2e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: CosineAnnealingRestartLR
    periods: [250000, 250000, 250000, 250000]
    restart_weights: [1, 1, 1, 1]
    eta_min: !!float 1e-7

  total_iter: 1000000
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean

# validation settings
val:
  # validation frequency. Validate every 5000 iterations
  val_freq: !!float 5e3
  save_img: false

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 4
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 5e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
